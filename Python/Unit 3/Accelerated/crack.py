alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
eng_freq = [.0817, .0149, .0278, .0425, .1270, .0223, .0202, .0609, .0697, .0015, .0077, .0403, .0241, .0675, .0751,
            .0193, .0010, .0599, .0633, .0906, .0276, .0098, .0236, .0015, .0197, .0007]

squared = []
for elm in eng_freq:
    squared.append(pow(elm, 2))
E = sum(squared)


def crack (txt):
    print("Friedman is", friedman_test(txt))
    print("Kasiski is", kasiski_test(txt))
    print("Enter desired keyword length: ")
    cosets = make_cosets(txt, int(input()))
    keyword = ''
    for coset in cosets:
        keyword += find_likely_letter(coset)
    print("Finished text:", decodeVigenere(txt, keyword))

def friedman_test (text):
    n = len(text)
    global E
    C = 1/26
    I = i_of_c(text)
    return ( n * (E - C) ) / ( (I * (n - 1) ) + ( E - (n * C) ))

def i_of_c (text):
    sumw = 0
    global alpha
    for x in range(26):
        temp = (text.count(alpha[x].upper())-1)/(len(text)-1) * text.count(alpha[x].upper())/len(text)
        sumw += temp
    return sumw

def kasiski_test(text):
    allThrees = []
    distances = []
    for x in range(len(text)-2):
        if (text[x] + text[x+1] + text[x+2] in allThrees):
            distances.append(x-allThrees.index(text[x] + text[x+1] + text[x+2]))
        allThrees.append(text[x] + text[x+1] + text[x+2])
    minElms = 1
    while (gcd_of_list(distances) == 1):
        minElms += 1
        for x in range(len(distances)):
            if (x >= len(distances)):
                break
            if (distances.count(distances[x]) < minElms):
                distances.remove(distances[x])
    return gcd_of_list(distances)

def find_total_difference(a, b):
    diff = 0
    if (len(a) != len(b)):
        return 
    for x in range(len(a)):
        diff += (abs(a[x] - b[x]))
    return diff

def find_likely_letter(coset):
    freq = []
    global alpha
    global eng_freq
    for x in range(26):
        freq.append(coset.count(alpha[x])/len(coset))
    lowest = 100000
    lowestLS = 27
    for i in range(26):
        freq.append(freq[0])
        freq.remove(freq[0])
        temp = find_total_difference(freq, eng_freq)
        if (temp < lowest):
            lowest = temp
            lowestLS = i
    return alpha[(lowestLS+1) % 26]

def decodeVigenere (code, cipher):
    global alpha
    result = ''
    for x in range(len(code)):        
        result += alpha[(alpha.index(code[x]) - alpha.index(cipher[x%len(cipher)]))%26]
    return result

def gcd_of_list(ls):
    return gcd_list_helper(ls, 0)

def gcd_list_helper(ls, index):
    if (index == len(ls) - 1):
        return ls[index]
    else:
        return gcd(ls[index], gcd_list_helper(ls, index+1))
    
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

def make_cosets(text, length):
    cosets = []
    for x in range(length):
        cosets.append(text[x:len(text):length])
    return cosets


example = "UZRZEGNJENVLISEXRHLYPYEGTESBJHJCSBPTGDYFXXBHEEIFTCCHVRKPNHWXPCTUQTGDJHTBIPRFEMJCNHVTCFSAIIJENREGSALHXHWZWRZXGTTVWGDHTEYXISAGQTCJPRSIAPTUMGZALHXHHSOHPWCZLBRZTCBRGHCDIQIKTOAAEFTOPYEGTENRAIALNRXLPCEPYKGPNGPRQPIAKWXDCBZXGPDNRWXEIFZXGJLVOXAJTUEMBLNLQHGPWVPEQPIAXATYENVYJEUEI"
crack(example)

c1 = "RVCQWMYFULRIKPFMQEMTJJOCLHYVHNFONGOGUFCRWHEPYAOOQSQCBYCRGMFYRSMRQUQSMYBXGKULHCRHIZSMSTZGQCCBNJMFMBARVURHBGGQFCFCHBGBAUCLIGQGHBMINPSFWWHECHPOHBCGAVULQYRCJPCXSQYECIBRCQHLGPORWILGQGHBQAUJZVGHMMTNCLNGHNPIFWBYCRMRCVCEOGHYJCHEWHMHBCFYYFFGSLRSMRGGWDFYWHRSRRKUQHIMGBMFNYBXGHGYRYZCNFTLGSXKOHYBXIOMGGEGTLCOEMINYBXEWPCHYPFCZZYYBMUSLQ"
c2 = "EFMREXHTGRQQVDODIPQSIVVNURSUVVNGNXRRIOIBEPOZNISWDRIOEOWVVYAVVIDFJFTYQDPFRKQMQCCFQBQXNRTKYRRHRCQWTXVZNIZVRDCEODSHZVCWDEENVCQWTXVVRRBSJTRMUZVRIIAOWMQIZNXYPYGJAEDMYKKIGCWXEYAUKRDNPSKCHHXVLQZMQILNFOVVVRNFSRJIVNGBEWKEGCVKRTZTJWWYGIIHSGDVZOPYJUGHUKBIPGETUYJDNXOTSXKOJIPMPXFZNIDLHKICQBVHEKNGCWDPURGCSXTTEUMSQULMRDMRPRNFSQSNVMGXXDVZOPMSPOFNNIVHHVRTOHWQRSEYHLPXOHKPJQIIVRQVKEAVKVJGKPTYKUCDMKXKOCEGWKKHUFUTMIFQUEKCAUKKTGXMQQEEQBQRTVPTYKUCDMKXKOCEGWKKHUKHGZYURFSGYJSTFGTKQPKEGKCXRHZNFKWHSLEPMIRHZNUDVXEKIQXWWJRTYSPOCLTQWEWGGETPSUOZNIKWSGTIHSGWCJKQBWRNMIPQEJKMEPZVRDCEODLHRIOEOWVQWPTYKUCDMKXKWJLSQPXHPIESEMUGJEZZIUVZSGSRPCEYFSJIGIEPDWXDAEEDWLPTLWNMQIBNQGPHFXEQPXKGRPRVMFCKIQXHRORIPCTHEZANSDHFRLIYVLVYMUKRGHFROKPOQXIEBIOCKEFDEVMJIPMPXFVTGCXLPXDGLYJIZNIKRGORIPDELPZNIDLHUFUTMIFQUEKWTOGDEPDEWKFNQPXKGSUKVHVAJTGWEQFDAPKKHOVNVYJGGIIXOHDTKIHKGWUJUEREVORCJSRHEFDGYJFQDPWDIURIOIBEPUKHGCIPKXHVLIFQESKNIUGUPCBXRHKHGZVRIIAOWMQIGRQMIVUSUVYJWGETJOXHTDSQPXZCIEFOZHNFPOORWKJUUOHIQITJSWOCIGGBTUQTEUCALVYTJOXHTDPTYKUCDMKXKLOGLGWIQVRTKYRRTTOFSRJTVSGBZHFWOTDLHCTTWKPZTZTKXKRHJOWBGHEFDGCSIVNATOIQIZNGOVLPXCQWFLPVSGXKLPVETSRJVVCJXMTWVSYSXKUFFVGEUGUEXOPRRDEPDTUCTTKMIV"
c3 = "OPKLNPCAVGYQRPKSAJUMYIUGVJHETIRRYWRHEEXQVBYEGSEIZVJSSMKEXWRSHVVHKWYXRVKSJTGVTIWSMQTHBSIHDAVPNCYEYJKIAXRGFMJXBXYIRIRPVXUIKQIXRHJMHXRCNRVRJZSSHWWEXMSSEIKLVVGQRXIIRQJIGLVJVKKSSEDEIWLEOSLXAWXXLJZZZEOXUEYIVDEFYETOHWAWGETLZITHEYXKZLRCUEEHNWSISIRXPZKWJMEWOWTQNHVJJZZLRWKEDZYMGARWIWAWRXICDVMXUICMABKZRRRXOPKFRWKSABOQRWZXRIYWRPUSHEUVXMEKVVJEGTIINMTXGLVIGMIXEMTGPZXIAXNENKAXBJWHPZORTHRCGQMLGLFYMAOXJEJTVZZSSXYIZKURBQPHMQBIVRGVZXGVNXZSINUVUEKIRMKOGLVJGIZANWJIQMTJYMXLOAATNRUADVYXBRNLJEGWGLZVOGTMAIRRYPGHNZRVDKUWRYCGZZGFBZVLDAXMTLKEISRIJIEXNTUAYCIINBORTWVZZZGPGMDINWTXUINETWTINGYPVVJMAKFTKWYMGIKLZTOJGWYEABZLRTFWOMXAVXYXCMKRBVDSPALEPIXEUMJJESDXCMCEYPZXRIYSAIFJOPUWRTZGOCXIFAYMXPGVRWFGJVZVVZVHOPGXGLVITMYJBPCSRGUYNFFYOENIACFYHWBIOMXFMWZLRVZWRIZGUMEKTWAXUITEKBOSAFVRZIZLVXIEI"
crack(c1)
crack(c2)
crack(c3)

# Example Decoded: FORMANYYEARSTHEKNOWNPLANETSOFOURSOLARSYSTEMWEREMERCURYVENUSEARTHMARSJUPITERSATURNURANUSNEPUTNEANDPLUTOHOWEVERITISNOWTRUETHATMANYPEOPLETHINKPLUTOSHOULDNOLONGERBECONSIDEREDANAMEDPLANETNEWPLANETSARECURRENTLYBEINGDISCOVEREDANDITISVERYLIKELYTHATMANYMOREWILLBEINTHENEARFUTURE
# C1 Decoded: THISISARANDOMBLOCKOFPLAINTEXTTHATIAMWRITINGBECAUSEWENEEDMORETESTCASESANDIWANTITTOBESUFFICIENTLYLONGTHATTHISWHOLETHINGWORKSWITHOUTRELYINGONRANDOMCHANCETOPRODUCEGOODDISTRIBUTIONSWITHSMALLBITSOFTEXTITTRULYNEEDSTOBEQUITELONGINOTHEREARLIERTESTSMYPLAINTEXTWASTOOSHORTANDITMADEBOTHFRIEDMANANDKASISKIFREAKOUTANDGIVETERRIBLEANSWERS
# C2 Decoded: COMPUTERPROGRAMMINGOFTENSHORTENEDTOPROGRAMMINGISAPROCESSTHATLEADSFROMANORIGINALFORMULATIONOFACOMPUTINGPROBLEMTOEXECUTABLECOMPUTERPROGRAMSPROGRAMMINGINVOLVESACTIVITIESSUCHASANALYSISDEVELOPINGUNDERSTANDINGGENERATINGALGORITHMSVERIFICATIONOFREQUIREMENTSOFALGORITHMSINCLUDINGTHEIRCORRECTNESSANDRESOURCESCONSUMPTIONANDIMPLEMENTATIONCOMMONLYREFERREDTOASCODINGOFALGORITHMSINATARGETPROGRAMMINGLANGUAGESOURCECODEISWRITTENINONEORMOREPROGRAMMINGLANGUAGESTHEPURPOSEOFPROGRAMMINGISTOFINDASEQUENCEOFINSTRUCTIONSTHATWILLAUTOMATEPERFORMINGASPECIFICTASKORSOLVINGAGIVENPROBLEMTHEPROCESSOFPROGRAMMINGTHUSOFTENREQUIRESEXPERTISEINMANYDIFFERENTSUBJECTSINCLUDINGKNOWLEDGEOFTHEAPPLICATIONDOMAINSPECIALIZEDALGORITHMSANDFORMALLOGICRELATEDTASKSINCLUDETESTINGDEBUGGINGANDMAINTAININGTHESOURCECODEIMPLEMENTATIONOFTHEBUILDSYSTEMANDMANAGEMENTOFDERIVEDARTIFACTSSUCHASMACHINECODEOFCOMPUTERPROGRAMSTHESEMIGHTBECONSIDEREDPARTOFTHEPROGRAMMINGPROCESSBUTOFTENTHETERMSOFTWAREDEVELOPMENTISUSEDFORTHISLARGERPROCESSWITHTHETERMPROGRAMMINGIMPLEMENTATIONORCODINGRESERVEDFORTHEACTUALWRITINGOFSOURCECODESOFTWAREENGINEERINGCOMBINESENGINEERINGTECHNIQUESWITHSOFTWAREDEVELOPMENTPRACTICES
# C3 Decoded